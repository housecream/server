<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
                        http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
                        http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
                        ">

	<bean id="myPasswordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
		<constructor-arg>
			<value>512</value>
		</constructor-arg>
	</bean>
	<bean id="saltSource" class="net.awired.ajsl.ws.resource.MixedSaltSource">
		<property name="source1">
			<bean class="org.springframework.security.authentication.dao.ReflectionSaltSource">
				<property name="userPropertyToUse">
					<value>id</value>
				</property>
			</bean>
		</property>
		<property name="source2">
			<bean class="org.springframework.security.authentication.dao.SystemWideSaltSource">
				<property name="systemWideSalt">
					<value>saltString</value>
				</property>
			</bean>
		</property>
	</bean>


	<sec:http pattern="/oauth/cache_approvals" security="none" />
	<sec:http pattern="/oauth/uncache_approvals" security="none" />

	<sec:http pattern="/oauth/token42" create-session="stateless" authentication-manager-ref="clientAuthenticationManager">
		<sec:intercept-url pattern="/oauth/token42" access="IS_AUTHENTICATED_FULLY" />
		<sec:anonymous enabled="false" />
		<sec:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request parameters -->
		<sec:custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sec:http>

	<!-- <sec:http pattern="/oauth/(users|clients)/.*" request-matcher="regex" create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint" -->
	<!-- use-expressions="true"> -->
	<!-- <sec:anonymous enabled="false" /> -->
	<!-- <sec:intercept-url pattern="/oauth/users/([^/].*?)/tokens/.*" -->
	<!-- access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER') or #oauth2.isClient()) and #oauth2.hasScope('write')" -->
	<!-- method="DELETE" /> -->
	<!-- <sec:intercept-url pattern="/oauth/users/.*" -->
	<!-- access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER') or #oauth2.isClient()) and #oauth2.hasScope('read')" -->
	<!-- method="GET" /> -->
	<!-- <sec:intercept-url pattern="/oauth/clients/.*" -->
	<!-- access="#oauth2.clientHasRole('ROLE_CLIENT') and #oauth2.isClient() and #oauth2.hasScope('read')" method="GET" /> -->
	<!-- <sec:intercept-url pattern="/**" access="denyAll()"/> -->
	<!-- <sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" /> -->
	<!-- <sec:access-denied-handler ref="oauthAccessDeniedHandler" /> -->
	<!-- <sec:expression-handler ref="oauthWebExpressionHandler" /> -->
	<!-- </sec:http> -->

	<!-- <sec:http pattern="/photos/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint" -->
	<!-- access-decision-manager-ref="accessDecisionManager"> -->
	<!-- <sec:anonymous enabled="false" /> -->
	<!-- <sec:intercept-url pattern="/photos" access="ROLE_USER,SCOPE_READ" /> -->
	<!-- <sec:intercept-url pattern="/photos/trusted/**" access="ROLE_CLIENT,SCOPE_TRUST" /> -->
	<!-- <sec:intercept-url pattern="/photos/user/**" access="ROLE_USER,SCOPE_TRUST" /> -->
	<!-- <sec:intercept-url pattern="/photos/**" access="ROLE_USER,SCOPE_READ" /> -->
	<!-- <sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" /> -->
	<!-- <sec:access-denied-handler ref="oauthAccessDeniedHandler" /> -->
	<!-- </sec:http> -->

	<!-- <sec:http pattern="/me/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint" -->
	<!-- access-decision-manager-ref="accessDecisionManager"> -->
	<!-- <sec:anonymous enabled="false" /> -->
	<!-- <sec:intercept-url pattern="/me" access="ROLE_USER,SCOPE_READ" /> -->
	<!-- <sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" /> -->
	<!-- <sec:access-denied-handler ref="oauthAccessDeniedHandler" /> -->
	<!-- </sec:http> -->

	<sec:http pattern="/ws/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager">
		<sec:anonymous enabled="false" />
		<sec:intercept-url pattern="/ws/**" access="ROLE_USER,SCOPE_READ" />
		<sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sec:http>


	<sec:http create-session="never" entry-point-ref="oauthAuthenticationEntryPoint" access-decision-manager-ref="accessDecisionManager">
		<sec:intercept-url pattern="/oauth/**" access="ROLE_USER" />
		<sec:intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<sec:anonymous />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sec:http>





	<bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="sparklr2" />
	</bean>

	<bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="sparklr2/client" />
		<property name="typeName" value="Basic" />
	</bean>

	<bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <constructor-arg value="/oauth/token42" />
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

	<sec:authentication-manager id="clientAuthenticationManager">
		<sec:authentication-provider user-service-ref="clientDetailsUserService" />
	</sec:authentication-manager>

	<sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider>
			<sec:user-service id="userDetailsService">
				<sec:user name="marissa" password="koala" authorities="ROLE_USER" />
				<sec:user name="paul" password="emu" authorities="ROLE_USER" />
			</sec:user-service>
		</sec:authentication-provider>
	</sec:authentication-manager>

	<bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>

	<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />

	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>

	<bean id="userApprovalHandler" class="org.springframework.security.oauth.examples.sparklr.oauth.SparklrUserApprovalHandler">
		<property name="autoApproveClients">
			<set>
				<value>my-less-trusted-autoapprove-client</value>
			</set>
		</property>
		<property name="tokenServices" ref="tokenServices" />
	</bean>

	<oauth:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>

	<oauth:resource-server id="resourceServerFilter" resource-id="sparklr" token-services-ref="tokenServices" />

	<oauth:client-details-service id="clientDetails">
		<oauth:client client-id="my-trusted-client" authorized-grant-types="password,authorization_code,refresh_token,implicit"
			authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" scope="read,write,trust" access-token-validity="60" />
		<oauth:client client-id="my-trusted-client-with-secret" authorized-grant-types="password,authorization_code,refresh_token,implicit"
			secret="somesecret" authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" />
		<oauth:client client-id="my-client-with-secret" authorized-grant-types="client_credentials" authorities="ROLE_CLIENT"
			scope="read" secret="secret" />
		<oauth:client client-id="my-less-trusted-client" authorized-grant-types="authorization_code,implicit"
			authorities="ROLE_CLIENT" />
		<oauth:client client-id="my-less-trusted-autoapprove-client" authorized-grant-types="implicit"
			authorities="ROLE_CLIENT" />
		<oauth:client client-id="my-client-with-registered-redirect" authorized-grant-types="authorization_code,client_credentials"
			authorities="ROLE_CLIENT" redirect-uri="http://anywhere?key=value" scope="read,trust" />
		<oauth:client client-id="my-untrusted-client-with-registered-redirect" authorized-grant-types="authorization_code"
			authorities="ROLE_CLIENT" redirect-uri="http://anywhere" scope="read" />
		<oauth:client client-id="tonr" resource-ids="sparklr" authorized-grant-types="authorization_code,implicit,password"
			authorities="ROLE_CLIENT" scope="read,write" secret="secret" />
	</oauth:client-details-service>

	<mvc:annotation-driven />

	<mvc:default-servlet-handler />

	<sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true">
		<!--you could also wire in the expression handler up at the layer of the http filters. See https://jira.springsource.org/browse/SEC-1452 -->
		<sec:expression-handler ref="oauthExpressionHandler" />
	</sec:global-method-security>

	<oauth:expression-handler id="oauthExpressionHandler" />

	<oauth:web-expression-handler id="oauthWebExpressionHandler" />








	<bean id="viewResolver" class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>
		<property name='defaultContentType' value='application/json' />
		<property name='favorPathExtension' value='true' />
	</bean>


	<!-- <bean id="photoController" class="org.springframework.security.oauth.examples.sparklr.mvc.PhotoController"> -->
	<!-- <property name="photoService" ref="photoServices" /> -->
	<!-- </bean> -->
	<!-- <bean id="photoServiceUserController" class="org.springframework.security.oauth.examples.sparklr.mvc.PhotoServiceUserController"> -->
	<!-- <property name="userDetailsService" ref="userDetailsService" /> -->
	<!-- </bean> -->
	<!-- <bean id="adminController" class="org.springframework.security.oauth.examples.sparklr.mvc.AdminController"> -->
	<!-- <property name="tokenServices" ref="tokenServices" /> -->
	<!-- <property name="userApprovalHandler" ref="userApprovalHandler" /> -->
	<!-- </bean> -->
	<!-- <bean id="accessConfirmationController" class="org.springframework.security.oauth.examples.sparklr.mvc.AccessConfirmationController"> -->
	<!-- <property name="clientDetailsService" ref="clientDetails" /> -->
	<!-- </bean> -->


	<!-- <bean id="photoServices" class="org.springframework.security.oauth.examples.sparklr.impl.PhotoServiceImpl"> -->
	<!-- <property name="photos"> -->
	<!-- <list> -->
	<!-- <bean class="org.springframework.security.oauth.examples.sparklr.PhotoInfo"> -->
	<!-- <property name="id" value="1" /> -->
	<!-- <property name="name" value="photo1.jpg" /> -->
	<!-- <property name="userId" value="marissa" /> -->
	<!-- <property name="resourceURL" value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo1.jpg" 
		/> -->
	<!-- </bean> -->
	<!-- <bean class="org.springframework.security.oauth.examples.sparklr.PhotoInfo"> -->
	<!-- <property name="id" value="2" /> -->
	<!-- <property name="name" value="photo2.jpg" /> -->
	<!-- <property name="userId" value="paul" /> -->
	<!-- <property name="resourceURL" value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo2.jpg" 
		/> -->
	<!-- </bean> -->
	<!-- <bean class="org.springframework.security.oauth.examples.sparklr.PhotoInfo"> -->
	<!-- <property name="id" value="3" /> -->
	<!-- <property name="name" value="photo3.jpg" /> -->
	<!-- <property name="userId" value="marissa" /> -->
	<!-- <property name="resourceURL" value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo3.jpg" 
		/> -->
	<!-- </bean> -->
	<!-- <bean class="org.springframework.security.oauth.examples.sparklr.PhotoInfo"> -->
	<!-- <property name="id" value="4" /> -->
	<!-- <property name="name" value="photo4.jpg" /> -->
	<!-- <property name="userId" value="paul" /> -->
	<!-- <property name="resourceURL" value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo4.jpg" 
		/> -->
	<!-- </bean> -->
	<!-- <bean class="org.springframework.security.oauth.examples.sparklr.PhotoInfo"> -->
	<!-- <property name="id" value="5" /> -->
	<!-- <property name="name" value="photo5.jpg" /> -->
	<!-- <property name="userId" value="marissa" /> -->
	<!-- <property name="resourceURL" value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo5.jpg" 
		/> -->
	<!-- </bean> -->
	<!-- <bean class="org.springframework.security.oauth.examples.sparklr.PhotoInfo"> -->
	<!-- <property name="id" value="6" /> -->
	<!-- <property name="name" value="photo6.jpg" /> -->
	<!-- <property name="userId" value="paul" /> -->
	<!-- <property name="resourceURL" value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo6.jpg" 
		/> -->
	<!-- </bean> -->
	<!-- </list> -->
	<!-- </property> -->
	<!-- </bean> -->

</beans>
